---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Welcome to Astro.">
	<main class="w-full h-full flex-col p-9 items-center flex justify-around">
	<h1 class="text-5xl h-20 text-center uppercase font-semibold">Descarga videos</h1>

	<div id="layout" class=" w-[full] inline-flex gap-3">
		<input   class=" w-[70%] border-none outline-none text-violet-700 p-3 rounded-2xl" id="url" type="text" name="url" placeholder="Ingresa tu URL" >
		<select class=" w-[30%] text-fuchsia-900 border-none outline-none rounded-xl p-2" id="format"  >
			<option>Elegir formato</option>
			<option value="mp3">MP3</option>
			<option value="mp4" >MP4</option>
		</select>
	</div>
<a href=""></a>
	<p id="error"></p>
	<br>
	<button id="save" class="p-6 w-full text-2xl font-bold rounded-xl text-center bg-gradient-to-l from-violet-600 from-20% via-violet-700 via-40% to-via-900 to-80%">Guardar descarga</button>
	<button id="download" class="p-6 w-full text-2xl font-bold rounded-xl text-center bg-gradient-to-l from-violet-600 from-20% via-violet-700 via-40% to-via-900 to-80%">Descargar</button>
	</main>
</Layout>

<script>
	const URLVIDEO ="http://localhost:4000/download/audio"
	const layout = document.getElementById("layout");
	const url = document.getElementById("url");
	const button = document.getElementById("download")
	const save = document.getElementById("save")
	const format = document.getElementById("format")

	let responseData={};
	let userUrl = "";
	let urlFormat = "";

url.addEventListener("change",handleUrlChange);
format.addEventListener("change", handleFormatChange);

save.addEventListener("click",()=>{ handlePermission(responseData)} )
button.addEventListener("click", videoRequestBackend);


  
function handleUrlChange(e){userUrl = e.target?.value}
function handleFormatChange(e){urlFormat = e.target?.value}

function showDownloadingIndicator(){layout.classList.add("showDownloadingIndicator");}
function hideDownloadingIndicator(){layout.classList.add("hideDownloadingIndicator");}

async function videoRequestBackend(){
	try {
		console.log(userUrl,"---------------")
		showDownloadingIndicator();
		const data = await fetch(`${URLVIDEO}?url=${userUrl}`)
		 responseData = await data.blob();
		hideDownloadingIndicator();
	} catch (error) {
		document.getElementById("error").textContent="Se detectÃ³ un error al momento de hacer la solicitud"
		console.error(error.message)
	}
	
url.removeEventListener("change", handleUrlChange);
format.removeEventListener("change", handleFormatChange);
button.removeEventListener("click", videoRequestBackend);
}

const handlePermission = async (blob={}) => {
  try {
	const opts = {
    types: [
      {
        description: "audio/mpeg",
		accept: {
        "audio/*": [".mp3", ".wav", ".ogg", ".aac", ".flac", ".m4a", ".wma"],
      },
      },
    ],
  };
    const handle = await window.showSaveFilePicker(opts);
    const writable = await handle.createWritable();
	const fileName = handle.name.endsWith('.mp3') ? handle.name : `${handle.name}.mp3`;
	const mimeType = "audio/mpeg";
    await writable.write(blob, {fileName:fileName, mineType:mimeType});
    await writable.close();
    alert("Archivo guardado exitosamente");
  } catch (error) {
    alert("Error al guardar el archivo:");
    console.error("Error al guardar el archivo:", error);
  }
  
save.removeEventListener("click", ()=>{handlePermission(responseData)})
};

</script>

<style>
	.showDownloadingIndicator{
		display: none;
	}
	.hideDownloadingIndicator{
		display: block;
	}
</style>